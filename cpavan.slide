GO
The new kid of the block
31 Jul 2015


Cristian Pavan
Developer, H-art
cpavan@h-art.com
 
* What's go ?

Go is a _statically-typed_ program language with syntax loosely derived from that of C that include:

- garbage collection
- type safety
- dynamic-typing capabilities
- additional built-in types (compared to C)
- large standard library

**
**

*Why* *it* *was* *made?*

The Go programming language is an open source project to make programmers more productive. 

* Is it perfect? 

*NO*

**

.caption GO is halfway through C and Python but it's not better of neither of the two

* Compare to C

**
**

What C does well ?
- memory management
- total control of what's is going on

**
**

What C doen't well ?
- memory management
- compile time and compile instruction
- warm-up project slow

* Compare to Python

**
**

What Python does well ?
- great built-in types
- simple (few lines of code)
- force you to write "good" code

**
**

What Python doesn't well ?
- Slow 
- Need a interpreter
- Packagin and ship

* Lacks of Generics

**
**

Sadly GO does not support generics like other *strictly-typed* programming language (Java, C#, C++)

**
**

	func append(slice []Type, elems ...Type) []Type
	
**
**

Use of 

	interface{}
to pass/receive arguments (it's like " _void_ _*_ " in C)

* Lacks of Generics - types Animal

.code animal/animal.go

* Lacks of Generics - types Human

.code human/human.go

* Lacks of Generics - example

.code speak.go /^func main/,/^}/

* Lacks of Generics - example

.code speak.go /^func Print/,/^}/

* Lacks of Generics - use interface

.code speak.go /^type ispeak/,/^}/

.code speak.go /^func PrintI/,/^}/

**
**

Compile time error

	./speak.go:32: cannot use dog (type *animal.Animal) as type ispeak in argument to PrintI:
	*animal.Animal does not implement ispeak (missing Speak method)

* Dependency - dir struct

	$ export GOPATH=~/GO

	.
	├── bin
	├── pkg
	│   └── linux_amd64
	│       ├── bitbucket.org
	│       ├── github.com
	│       └── golang.org
	└── src
	    ├── bitbucket.org
	    │   └── tux-eithel
	    ├── github.com
	    │   ├── golang
	    │   ├── heroku
	    │   ├── tools
	    │   └── tux-eithel
	    └── golang.org
		    └── x


* Dependency - imports

	import (
		"bufio"
		"errors"
		"fmt"
		"path"
		"path/filepath"
		"reflect"
		"runtime"
		"strconv"
		"strings"
		
		"database/sql"
		_ "github.com/lib/pq"
		
		"github.com/gorilla/mux"
	
		beecontext "github.com/astaxie/beego/context"
		"github.com/astaxie/beego/toolbox"
		"github.com/astaxie/beego/utils"
	)

* Dependency - solutions

**
**

- vendoring (likes [[https://github.com/tools/godep][godep]] and also proposed in go 1.5)
- project-based workspaces (likes [[http://getgb.io/][gb]])
- revision locking (likes [[https://github.com/mattn/gom][gom]])

* Other criticisms

- Too minimal
- Already stable
- Performance: *GOMAXPROCS* and *GC* (improved in go 1.5)

* General Feeling

**
**
**

.caption Go seems thinked from a group of people who always has worked with C ignoring the last 30 years of evolution of programming languages

* Where GO rocks

**
**

- learning curve
- compile speed
- scaling (built-in concurrency primitives)
- re-distribute apps (Docker, VM)
- promote the use of interfaces
- tools for manipulate the code

* Learning curve - 1

Go has a small syntax to keep the code concise and readable
example:
	
	// Like a C for
	for init; condition; post { }

		// Like a C while
	for condition { }

	// Like a C for(;;)
	for { }
	
	for key,value := range mapValues{
		
	}


Multiple return values:

	func (file *File) Write(b []byte) (n int, err error)

	num, err := f.Write([]byte{})
	
* Learning curve - 2

Check if an element is present on a map

	votes := map[string]int{
		"mi": 6,
		"lu": 7,
		"laltro": 4,
	}
	
	value, ok := votes["ti"]
	
Blank identifier

	if _, ok := votes["ti"]; !ok {
		fatal.Log("not found")
	}
	
	// for pointers to struct
	type MyType struct{}
	var _ MyInterface = (*MyType)(nil)

* Learning curve - 3

Embedding

	type Reader interface {
	    Read(p []byte) (n int, err error)
	}
	
	type Writer interface {
	    Write(p []byte) (n int, err error)
	}
	
	// ReadWriter is the interface that combines the Reader and Writer interfaces.
	type ReadWriter interface {
	    Reader
	    Writer
	}
	
* Learning curve - 4

Defer
	
	f, err := os.Open(filename)
    if err != nil {
        return "", err
    }
    defer f.Close()  // f.Close will run when we're finished.
	// rest of the code

Documentation
	
	// funcName sees people and does stuff
	func funcName(people []person) {
		
	}


* Concurrency

**
**

.caption Do not communicate by sharing memory; instead, share memory by communicating.

* Goroutine

**
**

A goroutine has a simple model: it is a function executing concurrently with other goroutines in the same address space. It is lightweight, costing little more than the allocation of stack space. And the stacks start small, so they are cheap, and grow by allocating (and freeing) heap storage as required. 


* Channel

.play routine.go

* Channel with Select

.play select.go